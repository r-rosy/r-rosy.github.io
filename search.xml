<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PhotoEncoding</title>
    <url>/2022/01/19/PhotoEncoding/</url>
    <content><![CDATA[<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CHAR</td>
<td align="left">0-255 bytes</td>
<td align="left">定长字符串</td>
</tr>
<tr>
<td align="left">VARCHAR</td>
<td align="left">0-65535 bytes</td>
<td align="left">变长字符串</td>
</tr>
<tr>
<td align="left">TINYBLOB</td>
<td align="left">0-255 bytes</td>
<td align="left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td align="left">TINYTEXT</td>
<td align="left">0-255 bytes</td>
<td align="left">短文本字符串</td>
</tr>
<tr>
<td align="left">BLOB</td>
<td align="left">0-65 535 bytes</td>
<td align="left">二进制形式的长文本数据</td>
</tr>
<tr>
<td align="left">TEXT</td>
<td align="left">0-65 535 bytes</td>
<td align="left">长文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMBLOB</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMTEXT</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">中等长度文本数据</td>
</tr>
<tr>
<td align="left">LONGBLOB</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td align="left">LONGTEXT</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">极大文本数据</td>
</tr>
</tbody></table>
<p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>
<p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>
<p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p>
<p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p>
<p>可见以上分别是为文本类型与二进制类型的对应</p>
<h5 id="而对于图片的编码保存，有用的即是blob类型和text类型的对应"><a href="#而对于图片的编码保存，有用的即是blob类型和text类型的对应" class="headerlink" title="而对于图片的编码保存，有用的即是blob类型和text类型的对应"></a>而对于图片的编码保存，有用的即是blob类型和text类型的对应</h5><h4 id="blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码"><a href="#blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码" class="headerlink" title="blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码"></a>blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码</h4>]]></content>
      <categories>
        <category>go</category>
        <category>encoding</category>
      </categories>
      <tags>
        <tag>encoding</tag>
        <tag>base64</tag>
        <tag>mysql</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Swag及其使用</title>
    <url>/2022/01/18/swag/</url>
    <content><![CDATA[<p>下面以gin-swagger为例，说明swaggo的用法。</p>
<p>安装swag命令行<br>要使用swaggo，首先要下载一个swag命令行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/swaggo/swag/cmd/swag</span><br></pre></td></tr></table></figure>

<h4 id="下面是设置环境变量"><a href="#下面是设置环境变量" class="headerlink" title="下面是设置环境变量"></a>下面是设置环境变量</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">打开系统的环境变量设置找到系统变量</span><br><span class="line">发现在$ GOPATH / bin /下会看到多了一个swag。把$ GOPATH / bin /加到PATH后，就可以在任意目录下直接用swag命令行了。否则仅能在swag.exe所在目录下才能使用swag命令。环境变量的作用相当于一个导向作用。</span><br></pre></td></tr></table></figure>



<p>在包含main.go的Go工程的根目录下执行swag init，swag会检索当前工程里的swag注解（类似上述Java中的注解），生成docs.go以及swagger.json/yaml。</p>
<p>获取gin专用的gin-swagger<br>里面包含了一个示例代码。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -u github.com/swaggo/gin-swagger</span><br><span class="line">$ <span class="keyword">go</span> get -u github.com/swaggo/gin-swagger/swaggerFiles</span><br></pre></td></tr></table></figure>


<p>编写gin-swagger需要的注释<br>接下来就是编写注释了。注释分为两部分，一是整体应用的说明，二是具体api的说明。</p>
<p>整体应用的说明<br>在主入口main.go中增加：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span> <span class="comment">// gin-swagger middleware</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/swaggo/gin-swagger/swaggerFiles&quot;</span> <span class="comment">// swagger embed files</span></span><br></pre></td></tr></table></figure>


<p>以及针对该应用程序的api说明。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/swaggo/gin-swagger/swaggerFiles&quot;</span><span class="string">`)</span></span><br></pre></td></tr></table></figure>

<pre><code>_ &quot;github.com/swaggo/gin-swagger/example/docs&quot;
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @title Swagger Example API</span></span><br><span class="line"><span class="comment">// @version 0.0.1</span></span><br><span class="line"><span class="comment">// @description  This is a sample server Petstore server.</span></span><br><span class="line"><span class="comment">// @BasePath /api/v1/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.New()</span><br><span class="line">	r.GET(<span class="string">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>请注意@BasePath。swagger注释中说明的@BasePath，，@Router而不是gin代码中声明的路径（没那么智能）。</p>
<p>具体api的说明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @Summary Add a new pet to the store</span></span><br><span class="line"><span class="comment">// @Description get string by ID</span></span><br><span class="line"><span class="comment">// @Accept  json</span></span><br><span class="line"><span class="comment">// @Produce  json</span></span><br><span class="line"><span class="comment">// @Param   some_id     path    int     true        &quot;Some ID&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; string	&quot;ok&quot;</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; web.APIError &quot;We need ID!!&quot;</span></span><br><span class="line"><span class="comment">// @Failure 404 &#123;object&#125; web.APIError &quot;Can not find ID&quot;</span></span><br><span class="line"><span class="comment">// @Router /testapi/get-string-by-int/&#123;some_id&#125; [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStringByInt</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	err := web.APIError&#123;&#125;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>说明下几个参数。</p>
<p>如果不需要参数（例如，获取所有类型的，由url就齐活了），则不需要加@Param。参数可以是int或字符串类型。这里的定义会影响swagger ui发送的请求，如果定义错了会导致发送请求的数据不对，例如对数字进行了转义。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Param group body model.SwagGroupAdd true &quot;Add group&quot;</span></span><br><span class="line"><span class="comment">// @Param name path string true &quot;Group Name&quot;</span></span><br><span class="line"><span class="comment">// @Param role query int true &quot;Role ID&quot;</span></span><br></pre></td></tr></table></figure>

<p>@Success和@Failure定义了返回值，类型可以是字符串，对象，数组。按照一般的restful定义，这三个类型足够表达返回值了。</p>
<p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档<br>不过有些不太标准的restful实践会在上述返回之上再包装一个代码/消息/正文，所以对swaggo来说会造成一些新的负担，因为必须为这些返回类型单独加对应的类型。这项。</p>
<p>swag初始化<br>在项目根目录里执行swag init，生成docs/docs.go；再执行go run main.go，访问<a href="http://localhost:8080/swagger/index.html%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%84%89%E5%BF%AB%E7%9A%84%E4%BD%BF%E7%94%A8swagger">http://localhost:8080/swagger/index.html，就可以愉快的使用swagger</a> ui了。</p>
<p>参考原文链接：<a href="https://blog.csdn.net/qq_34857250/article/details/105122232">https://blog.csdn.net/qq_34857250/article/details/105122232</a></p>
]]></content>
      <categories>
        <category>go</category>
        <category>框架工具</category>
      </categories>
      <tags>
        <tag>Swaggo</tag>
        <tag>Swag</tag>
      </tags>
  </entry>
  <entry>
    <title>GoWeb开发中token及其使用解析</title>
    <url>/2022/01/18/token/</url>
    <content><![CDATA[<h1 id="生成解析token"><a href="#生成解析token" class="headerlink" title="生成解析token"></a>生成解析token</h1><p>如今有很多将身份验证内置到API中的方法 -JSON Web令牌只是其中之一。JSON Web令牌（JWT）作为令牌系统而不是在每次请求时都发送用户名和密码，因此比其他方法（如基本身份验证）具有固有的优势。要了解更多信息，请直接进入jwt.io上的介绍，然后再直接学习。</p>
<p>以下是JWT的实际应用示例。主要有两个部分：提供用户名和密码以获取令牌；并根据请求检查该令牌。</p>
<p>在此示例中，我们使用了两个库，即Go中的JWT实现以及将其用作中间件的方式。</p>
<p>最后，在使用此代码之前，您需要将APP_KEY常量更改为机密（理想情况下，该常量将存储在代码库外部），并改进用户名/密码检查中的内容，TokenHandler以检查不仅仅是myusername/ mypassword组合。</p>
<p>下面的代码是gin框架对jwt的封装</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一个字符串</span></span><br><span class="line"><span class="keyword">var</span> jwtkey = []<span class="keyword">byte</span>(<span class="string">&quot;www.topgoer.com&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Claims <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserId <span class="keyword">uint</span></span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/set&quot;</span>, setting)</span><br><span class="line">    r.GET(<span class="string">&quot;/get&quot;</span>, getting)</span><br><span class="line">    <span class="comment">//监听端口默认为8080</span></span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//颁发token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setting</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">    expireTime := time.Now().Add(<span class="number">7</span> * <span class="number">24</span> * time.Hour)</span><br><span class="line">    claims := &amp;Claims&#123;</span><br><span class="line">        UserId: <span class="number">2</span>,</span><br><span class="line">        StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">            ExpiresAt: expireTime.Unix(), <span class="comment">//过期时间</span></span><br><span class="line">            IssuedAt:  time.Now().Unix(),</span><br><span class="line">            Issuer:    <span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment">// 签名颁发者</span></span><br><span class="line">            Subject:   <span class="string">&quot;user token&quot;</span>, <span class="comment">//签名主题</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">    <span class="comment">// fmt.Println(token)</span></span><br><span class="line">    tokenString, err := token.SignedString(jwtkey)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    str = tokenString</span><br><span class="line">    ctx.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;token&quot;</span>: tokenString&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getting</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">    tokenString := ctx.GetHeader(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">    <span class="comment">//vcalidate token formate</span></span><br><span class="line">    <span class="keyword">if</span> tokenString == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token, claims, err := ParseToken(tokenString)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> || !token.Valid &#123;</span><br><span class="line">        ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="number">111</span>)</span><br><span class="line">    fmt.Println(claims.UserId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="keyword">string</span>)</span> <span class="params">(*jwt.Token, *Claims, error)</span></span> &#123;</span><br><span class="line">    Claims := &amp;Claims&#123;&#125;</span><br><span class="line">    token, err := jwt.ParseWithClaims(tokenString, Claims, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(i <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtkey, <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> token, Claims, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
        <category>方法</category>
      </categories>
      <tags>
        <tag>token</tag>
        <tag>go</tag>
        <tag>JWT</tag>
        <tag>gin</tag>
      </tags>
  </entry>
  <entry>
    <title>viper</title>
    <url>/2022/01/18/viper/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
