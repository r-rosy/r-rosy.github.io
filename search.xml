<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PhotoEncoding</title>
    <url>/2022/01/19/PhotoEncoding/</url>
    <content><![CDATA[<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">大小</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CHAR</td>
<td align="left">0-255 bytes</td>
<td align="left">定长字符串</td>
</tr>
<tr>
<td align="left">VARCHAR</td>
<td align="left">0-65535 bytes</td>
<td align="left">变长字符串</td>
</tr>
<tr>
<td align="left">TINYBLOB</td>
<td align="left">0-255 bytes</td>
<td align="left">不超过 255 个字符的二进制字符串</td>
</tr>
<tr>
<td align="left">TINYTEXT</td>
<td align="left">0-255 bytes</td>
<td align="left">短文本字符串</td>
</tr>
<tr>
<td align="left">BLOB</td>
<td align="left">0-65 535 bytes</td>
<td align="left">二进制形式的长文本数据</td>
</tr>
<tr>
<td align="left">TEXT</td>
<td align="left">0-65 535 bytes</td>
<td align="left">长文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMBLOB</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td align="left">MEDIUMTEXT</td>
<td align="left">0-16 777 215 bytes</td>
<td align="left">中等长度文本数据</td>
</tr>
<tr>
<td align="left">LONGBLOB</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">二进制形式的极大文本数据</td>
</tr>
<tr>
<td align="left">LONGTEXT</td>
<td align="left">0-4 294 967 295 bytes</td>
<td align="left">极大文本数据</td>
</tr>
</tbody></table>
<p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p>
<p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p>
<p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p>
<p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p>
<p>可见以上分别是为文本类型与二进制类型的对应</p>
<h5 id="而对于图片的编码保存，有用的即是blob类型和text类型的对应"><a href="#而对于图片的编码保存，有用的即是blob类型和text类型的对应" class="headerlink" title="而对于图片的编码保存，有用的即是blob类型和text类型的对应"></a>而对于图片的编码保存，有用的即是blob类型和text类型的对应</h5><h4 id="blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码"><a href="#blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码" class="headerlink" title="blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码"></a>blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码</h4>]]></content>
      <categories>
        <category>go</category>
        <category>encoding</category>
      </categories>
      <tags>
        <tag>encoding</tag>
        <tag>base64</tag>
        <tag>mysql</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2-Ubuntu-20.04-LTS出现的一些使用问题</title>
    <url>/2022/01/23/WSL-Ubuntu-20-04-LTS/</url>
    <content><![CDATA[<h3 id="有时候会出现这样的报错"><a href="#有时候会出现这样的报错" class="headerlink" title="有时候会出现这样的报错"></a>有时候会出现这样的报错</h3><h5 id="1-在linux中使用git时，连接远程仓库时会出现报错"><a href="#1-在linux中使用git时，连接远程仓库时会出现报错" class="headerlink" title="1.在linux中使用git时，连接远程仓库时会出现报错"></a>1.在linux中使用git时，连接远程仓库时会出现报错</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RPC failed; curl 7 GnuTLS recv error</span><br></pre></td></tr></table></figure>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global http.sslVerify <span class="literal">false</span></span><br><span class="line">$ git config --global http.postBuffer 1048576000</span><br></pre></td></tr></table></figure>

<h4 id="对全局生效"><a href="#对全局生效" class="headerlink" title="对全局生效~"></a>对全局生效~</h4><h4 id="即可解决"><a href="#即可解决" class="headerlink" title="即可解决"></a>即可解决</h4><h4 id="2-在linux中使用go-get出现一样的错误则按以下方法"><a href="#2-在linux中使用go-get出现一样的错误则按以下方法" class="headerlink" title="2.在linux中使用go get出现一样的错误则按以下方法"></a>2.在linux中使用go get出现一样的错误则按以下方法</h4><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.cn,direct</span></span><br></pre></td></tr></table></figure>

<h3 id="即可解决-1"><a href="#即可解决-1" class="headerlink" title="即可解决"></a>即可解决</h3><h4 id="3-CentOS-8在本地使用ymp安装mysql-server报错"><a href="#3-CentOS-8在本地使用ymp安装mysql-server报错" class="headerlink" title="3.CentOS 8在本地使用ymp安装mysql-server报错"></a>3.CentOS 8在本地使用ymp安装mysql-server报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: Unable to find a match: mysql-community-server</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br><span class="line">Last metadata expiration check: 0:13:40 ago on Sun 26 Apr 2020 11:20:57 AM CST.</span><br><span class="line">No match <span class="keyword">for</span> argument: mysql-community-server</span><br><span class="line">Error: Unable to find a match: mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决：</span></span><br><span class="line"><span class="comment"># 先执行：yum module disable mysql</span></span><br><span class="line"><span class="comment"># 再执行：yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure>

<h4 id="4-用ymp安装mysql-server报错"><a href="#4-用ymp安装mysql-server报错" class="headerlink" title="4.用ymp安装mysql-server报错"></a>4.用ymp安装mysql-server报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Import of key(s) didn<span class="string">&#x27;t help, wrong key(s)?</span></span><br><span class="line"><span class="string">Public key for mysql-community-client-5.7.37-1.el7.x86_64.rpm is not installed. Failing package is: mysql-community-client-5.7.37-1.el7.x86_64</span></span><br><span class="line"><span class="string"> GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span></span><br><span class="line"><span class="string">Public key for mysql-community-common-5.7.37-1.el7.x86_64.rpm is not installed. Failing package is: mysql-community-common-5.7.37-1.el7.x86_64</span></span><br><span class="line"><span class="string"> GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span></span><br><span class="line"><span class="string">Public key for mysql-community-libs-5.7.37-1.el7.x86_64.rpm is not installed. Failing package is: mysql-community-libs-5.7.37-1.el7.x86_64</span></span><br><span class="line"><span class="string"> GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span></span><br><span class="line"><span class="string">Public key for mysql-community-server-5.7.37-1.el7.x86_64.rpm is not installed. Failing package is: mysql-community-server-5.7.37-1.el7.x86_64</span></span><br><span class="line"><span class="string"> GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span></span><br><span class="line"><span class="string">The downloaded packages were saved in cache until the next successful transaction.</span></span><br><span class="line"><span class="string">You can remove cached packages by executing &#x27;</span>yum clean packages<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">Error: GPG check FAILED</span></span><br></pre></td></tr></table></figure>

<h3 id="Error-GPG-check-FAILED。这由于源key错误导致的dnf或者yum（软件包管理器）安装软件失败。"><a href="#Error-GPG-check-FAILED。这由于源key错误导致的dnf或者yum（软件包管理器）安装软件失败。" class="headerlink" title="Error:GPG check FAILED。这由于源key错误导致的dnf或者yum（软件包管理器）安装软件失败。"></a>Error:GPG check FAILED。这由于源key错误导致的dnf或者yum（软件包管理器）安装软件失败。</h3><h3 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="解决的方法很简单"><a href="#解决的方法很简单" class="headerlink" title="解决的方法很简单"></a>解决的方法很简单</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum/dnf install packagemame --nogpgcheck</span><br></pre></td></tr></table></figure>

<h4 id="没错，在命令最后添加一句-–nogpgcheck-选项就能解决此问题。"><a href="#没错，在命令最后添加一句-–nogpgcheck-选项就能解决此问题。" class="headerlink" title="没错，在命令最后添加一句 –nogpgcheck 选项就能解决此问题。"></a>没错，在命令最后添加一句 –nogpgcheck 选项就能解决此问题。</h4><h4 id="5-ubuntu初次安装mysql查看初始密码以登录"><a href="#5-ubuntu初次安装mysql查看初始密码以登录" class="headerlink" title="5.ubuntu初次安装mysql查看初始密码以登录"></a>5.ubuntu初次安装mysql查看初始密码以登录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>

<h4 id="6-Ubuntu启动mysql异常报错"><a href="#6-Ubuntu启动mysql异常报错" class="headerlink" title="6.Ubuntu启动mysql异常报错"></a>6.Ubuntu启动mysql异常报错</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can<span class="string">&#x27;t connect to local MySQL server through socket &#x27;</span>/var/run/mysqld/mysqld.sock<span class="string">&#x27; (2)</span></span><br></pre></td></tr></table></figure>

<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h5 id="没有启动mysql的服务程序"><a href="#没有启动mysql的服务程序" class="headerlink" title="没有启动mysql的服务程序"></a>没有启动mysql的服务程序</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">——sudo service mysql restart</span><br></pre></td></tr></table></figure>



<h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      <categories>
        <category>wsl2</category>
        <category>ubuntu</category>
        <category>TLS</category>
      </categories>
      <tags>
        <tag>wsl2</tag>
        <tag>ubuntu</tag>
        <tag>TLS</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Swag及其使用</title>
    <url>/2022/01/18/swag/</url>
    <content><![CDATA[<p>下面以gin-swagger为例，说明swaggo的用法。</p>
<p>安装swag命令行<br>要使用swaggo，首先要下载一个swag命令行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/swaggo/swag/cmd/swag</span><br></pre></td></tr></table></figure>

<h4 id="下面是设置环境变量"><a href="#下面是设置环境变量" class="headerlink" title="下面是设置环境变量"></a>下面是设置环境变量</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">打开系统的环境变量设置找到系统变量</span><br><span class="line">发现在$ GOPATH / bin /下会看到多了一个swag。把$ GOPATH / bin /加到PATH后，就可以在任意目录下直接用swag命令行了。否则仅能在swag.exe所在目录下才能使用swag命令。环境变量的作用相当于一个导向作用。</span><br></pre></td></tr></table></figure>



<p>在包含main.go的Go工程的根目录下执行swag init，swag会检索当前工程里的swag注解（类似上述Java中的注解），生成docs.go以及swagger.json/yaml。</p>
<p>获取gin专用的gin-swagger<br>里面包含了一个示例代码。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -u github.com/swaggo/gin-swagger</span><br><span class="line">$ <span class="keyword">go</span> get -u github.com/swaggo/gin-swagger/swaggerFiles</span><br></pre></td></tr></table></figure>


<p>编写gin-swagger需要的注释<br>接下来就是编写注释了。注释分为两部分，一是整体应用的说明，二是具体api的说明。</p>
<p>整体应用的说明<br>在主入口main.go中增加：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span> <span class="comment">// gin-swagger middleware</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/swaggo/gin-swagger/swaggerFiles&quot;</span> <span class="comment">// swagger embed files</span></span><br></pre></td></tr></table></figure>


<p>以及针对该应用程序的api说明。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/swaggo/gin-swagger/swaggerFiles&quot;</span><span class="string">`)</span></span><br></pre></td></tr></table></figure>

<pre><code>_ &quot;github.com/swaggo/gin-swagger/example/docs&quot;
</code></pre>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @title Swagger Example API</span></span><br><span class="line"><span class="comment">// @version 0.0.1</span></span><br><span class="line"><span class="comment">// @description  This is a sample server Petstore server.</span></span><br><span class="line"><span class="comment">// @BasePath /api/v1/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.New()</span><br><span class="line">	r.GET(<span class="string">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>请注意@Router的路径。swagger注释中说明的@Router是在@BasePath下的相对路径，并不为绝对路径。</p>
<p>具体api的说明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @Summary Add a new pet to the store</span></span><br><span class="line"><span class="comment">// @Description get string by ID</span></span><br><span class="line"><span class="comment">// @Accept  json</span></span><br><span class="line"><span class="comment">// @Produce  json</span></span><br><span class="line"><span class="comment">// @Param   some_id     path    int     true        &quot;Some ID&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; string	&quot;ok&quot;</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; web.APIError &quot;We need ID!!&quot;</span></span><br><span class="line"><span class="comment">// @Failure 404 &#123;object&#125; web.APIError &quot;Can not find ID&quot;</span></span><br><span class="line"><span class="comment">// @Router /testapi/get-string-by-int/&#123;some_id&#125; [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStringByInt</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">	err := web.APIError&#123;&#125;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>说明下几个参数。</p>
<p>如果不需要参数（例如，获取所有类型的，由url就齐活了），则不需要加@Param。参数可以是int或字符串类型。这里的定义会影响swagger ui发送的请求，如果定义错了会导致发送请求的数据不对，例如对数字进行了转义。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Param group body model.SwagGroupAdd true &quot;Add group&quot;</span></span><br><span class="line"><span class="comment">// @Param name path string true &quot;Group Name&quot;</span></span><br><span class="line"><span class="comment">// @Param role query int true &quot;Role ID&quot;</span></span><br></pre></td></tr></table></figure>

<p>@Success和@Failure定义了返回值，类型可以是字符串，对象，数组。按照一般的restful定义，这三个类型足够表达返回值了。</p>
<p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档<br>不过有些不太标准的restful实践会在上述返回之上再包装一个代码/消息/正文，所以对swaggo来说会造成一些新的负担，因为必须为这些返回类型单独加对应的类型。这项。</p>
<p>swag初始化<br>在项目根目录里执行swag init，生成docs/docs.go；再执行go run main.go，访问<a href="http://localhost:8080/swagger/index.html%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%84%89%E5%BF%AB%E7%9A%84%E4%BD%BF%E7%94%A8swagger">http://localhost:8080/swagger/index.html，就可以愉快的使用swagger</a> ui了。</p>
<h4 id="以下是可能出现的问题"><a href="#以下是可能出现的问题" class="headerlink" title="以下是可能出现的问题"></a>以下是可能出现的问题</h4><ul>
<li><p><strong>swagger页面出现加载错误</strong></p>
<h1 id="mitting-host-returns-Internal-Server-Error-500-1019"><a href="#mitting-host-returns-Internal-Server-Error-500-1019" class="headerlink" title="mitting host returns Internal Server Error (500) #1019"></a>mitting host returns Internal Server Error (500) #1019</h1><h4 id="akshay196-opened-this-issue-on-7-Oct-2021-·-1-comment"><a href="#akshay196-opened-this-issue-on-7-Oct-2021-·-1-comment" class="headerlink" title="akshay196 opened this issue on 7 Oct 2021 · 1 comment"></a><strong><a href="https://github.com/akshay196">akshay196</a> opened this issue on 7 Oct 2021 · 1 comment</strong></h4><p><strong>Describe the bug</strong> </p>
<p>[<img src="https://user-images.githubusercontent.com/16691314/136343497-6db89882-72cb-4434-bef2-609954622492.png" alt="Screenshot from 2021-10-07 13-26-58"></p>
</li>
</ul>
<h3 id="问题原因以及解决方案"><a href="#问题原因以及解决方案" class="headerlink" title="问题原因以及解决方案"></a>问题原因以及解决方案</h3><h5 id="没有import-之前swag-init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”-”"><a href="#没有import-之前swag-init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”-”" class="headerlink" title="没有import 之前swag init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”_”"></a>没有import 之前swag init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”_”</h5>]]></content>
      <categories>
        <category>go</category>
        <category>框架工具</category>
      </categories>
      <tags>
        <tag>Swaggo</tag>
        <tag>Swag</tag>
      </tags>
  </entry>
  <entry>
    <title>gorm中的注意点</title>
    <url>/2022/01/20/order/</url>
    <content><![CDATA[<h1 id="1-gorm中的排序踩坑"><a href="#1-gorm中的排序踩坑" class="headerlink" title="1.gorm中的排序踩坑"></a>1.gorm中的排序踩坑</h1><h3 id="如查询”按照created-at升序第一个创建的User“"><a href="#如查询”按照created-at升序第一个创建的User“" class="headerlink" title="如查询”按照created_at升序第一个创建的User“"></a>如查询”按照<code>created_at</code>升序第一个创建的User“</h3><h3 id="正确的写法："><a href="#正确的写法：" class="headerlink" title="正确的写法："></a>正确的写法：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;models.User&#123;&#125;).Order(<span class="string">&quot;created_at ASC&quot;</span>).Limit(<span class="number">1</span>).Find(&amp;s)</span><br></pre></td></tr></table></figure>

<p>sql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;users&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">ASC</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="错误写法："><a href="#错误写法：" class="headerlink" title="错误写法："></a>错误写法：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;models.User&#123;&#125;).Order(<span class="string">&quot;created_at ASC&quot;</span>).First(&amp;s)</span><br></pre></td></tr></table></figure>

<p>这样写会自动加上主键的排序，生成的sql，虽然说结果应该都没什么差别，但是和预期的sql并不一样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;users&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">ASC</span>, &quot;users&quot;.&quot;id&quot; <span class="keyword">ASC</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="错误写法：-1"><a href="#错误写法：-1" class="headerlink" title="错误写法："></a>错误写法：</h3><p>这样写，直接和想要的sql意图相反，变成”最后一个创建的User“，且自动加上了主键的排序</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Model(&amp;models.User&#123;&#125;).Order(<span class="string">&quot;created_at DESC&quot;</span>).Last(&amp;s)</span><br></pre></td></tr></table></figure>

<p>sql:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;users&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span>, &quot;users&quot;.&quot;id&quot; <span class="keyword">DESC</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>go</category>
        <category>gorm</category>
      </categories>
      <tags>
        <tag>gorm</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go/python</title>
    <url>/2022/01/21/go-python/</url>
    <content><![CDATA[<blockquote>
<p>由于一些原因，python库不方便使用golang重构实现，因此我们可以通过go调用python库的方式来达到实现需求的目的</p>
</blockquote>
<ul>
<li>通过shell命令组装的方式调用python</li>
</ul>
<blockquote>
<p>主要使用到了go的<code>os/exec</code>包，以及python的<code>-c</code>参数</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">(point <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	<span class="keyword">var</span> cmd *exec.Cmd</span><br><span class="line">	<span class="keyword">var</span> datas []<span class="keyword">byte</span></span><br><span class="line">	py := <span class="string">&quot;python&quot;</span></span><br><span class="line">	flag := <span class="string">&quot;-c&quot;</span></span><br><span class="line">	importmodule := <span class="string">&quot;import sys&quot;</span></span><br><span class="line">	Target := <span class="string">&quot;print(sys.path)&quot;</span></span><br><span class="line">	params := fmt.Sprintf(<span class="string">&quot;%s;%s&quot;</span>, importmodule, Target)</span><br><span class="line">	fmt.Println(params)</span><br><span class="line">	cmd = exec.Command(py, flag, params)</span><br><span class="line">	<span class="keyword">if</span> datas, err = cmd.Output(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(datas))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>同样的，在使用其他自写python库时，先将python代码路径加入到<code>sys.path</code>路径下，再进行调用即可。</p>
<p>作者：顾明同学<br>链接：<a href="https://juejin.cn/post/6947888630136307748">https://juejin.cn/post/6947888630136307748</a><br>来源：稀土掘金</p>
<p>最近有一个项目需要在服务端调用Python3.7写的算法，网上找了一圈，发现两个库都使用cgo特性调用了Python的C-API：</p>
<p>针对Python2:</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/sbinet/go-python">https://github.com/sbinet/go-pythongithub.com/sbinet/go-python</a></p>
<p>针对Python3:</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/DataDog/go-python3">https://github.com/DataDog/go-python3github.com/DataDog/go-python3</a></p>
<hr>
<p>由于我这边的算法是Python3.7写的，自然使用<strong>go-python3</strong>这个库，安装方法也简单，使用下面的命令：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/DataDog/<span class="keyword">go</span>-python3</span><br></pre></td></tr></table></figure>

<p><strong>安装库时，可能会提示找不到python3.pc这个文件，这时可以先安装对应有dev包，用pyenv就可以安装，然后配置PKG_CONFIGPATH到对应的pkgconfig文件下，那里会有python3.pc。重新配置好PKG_CONFIG_PATH后，再执行go get命令应该就不会报错了。</strong></p>
<p>参考命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/Users/yourname/.pyenv/versions/3.7-dev/lib/pkgconfig/ </span><br></pre></td></tr></table></figure>

<hr>
<p>Golang中调用Python3时，一定要注意设置包的查找路径，参考代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func ImportModule(dir, name string) *python3.PyObject &#123;</span><br><span class="line">   sysModule := python3.PyImport_ImportModule(&quot;sys&quot;) </span><br><span class="line">   path := sysModule.GetAttrString(&quot;path&quot;)                    </span><br><span class="line">   python3.PyList_Insert(path, 0, python3.PyUnicode_FromString(&quot;/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages&quot;))</span><br><span class="line">   python3.PyList_Insert(path, 0, python3.PyUnicode_FromString(dir)</span><br><span class="line">   return python3.PyImport_ImportModule(name)           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面函数直接对系统的PATH变量进行了配置，dir变量用来传入自定义的模块路径（自已写的算法包等等），name是算法包的名字。</p>
<p>正常的调用步骤为：</p>
<ol>
<li>python3.Py_Initialize()初始化调用环境；</li>
<li>引入模块；</li>
<li>GetAttrString()得到算法包；</li>
<li>配置传入参数，调用Call()执行算法；</li>
<li>解析算法返回的结果；</li>
<li>python3.Py_Finalize()销毁Python3运行环境。</li>
</ol>
<p>这里给出示例代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func PyTest() &#123;</span><br><span class="line">    python3.Py_Initialize()</span><br><span class="line">   if !python3.Py_IsInitialized() &#123;</span><br><span class="line">      fmt.Println(&quot;Error initializing the python interpreter&quot;)</span><br><span class="line">      os.Exit(1)</span><br><span class="line">   &#125;</span><br><span class="line">   v := ImportModule(&quot;/Users/yourname/Desktop/lab/pppython&quot;, &quot;value_pp&quot;)</span><br><span class="line"></span><br><span class="line">   b := v.GetAttrString(&quot;estimate_pp&quot;)</span><br><span class="line">   fmt.Printf(&quot;[FUNC] b = %#v\n&quot;, b)</span><br><span class="line">   bArgs := python3.PyTuple_New(1)</span><br><span class="line">   python3.PyTuple_SetItem(bArgs, 0, python3.PyUnicode_FromString(&quot;/Users/yourname/Desktop/lab/pppython/srcdata/67.csv&quot;))</span><br><span class="line">   re := b.Call(bArgs, python3.Py_None)</span><br><span class="line">   fmt.Println(&quot;IsCallable: &quot;, python3.PyCallable_Check(b))</span><br><span class="line">   re1 := python3.PyTuple_GetItem(re, 0)</span><br><span class="line">   re2 := python3.PyTuple_GetItem(re, 1)</span><br><span class="line">   fmt.Println(&quot;re1:&quot;, python3.PyLong_AsLong(re1))</span><br><span class="line">   fmt.Println(&quot;re2:&quot;, python3.PyLong_AsLong(re2))</span><br><span class="line">   python3.Py_Finalize()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于算法中返回多个值时对应的是Tuple，所以上面采用了PyTupleGetItem来得到相应的元素，但拿到这个值还不能直接输出使用，因为它还是PyObject类型，需要根据实际类型再调用As相关的函数进行一次转化后再输出，比如这里用的是pythone.PyLong_AsLong。</p>
<hr>
<p>go-python3这个库的源码比较简单，可以直接查看，也可以对比<a href="https://link.zhihu.com/?target=https://docs.python.org/3.7/c-api/index.html">https://docs.python.org/3.7/c-api/index.html</a>去理解。这里写的是Python3的调用方法，至python2相关的可以参考GO语言中文网的一篇文章</p>
<p><a href="https://link.zhihu.com/?target=https://studygolang.com/articles/11155">https://studygolang.com/articles/11155studygolang.com/articles/11155</a></p>
<p>里面用的是go-python库。</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>GoWeb开发中token及其使用解析</title>
    <url>/2022/01/18/token/</url>
    <content><![CDATA[<h1 id="生成解析token"><a href="#生成解析token" class="headerlink" title="生成解析token"></a>生成解析token</h1><p>如今有很多将身份验证内置到API中的方法 -JSON Web令牌只是其中之一。JSON Web令牌（JWT）作为令牌系统而不是在每次请求时都发送用户名和密码，因此比其他方法（如基本身份验证）具有固有的优势。要了解更多信息，请直接进入jwt.io上的介绍，然后再直接学习。</p>
<p>以下是JWT的实际应用示例。主要有两个部分：提供用户名和密码以获取令牌；并根据请求检查该令牌。</p>
<p>在此示例中，我们使用了两个库，即Go中的JWT实现以及将其用作中间件的方式。</p>
<p>最后，在使用此代码之前，您需要将APP_KEY常量更改为机密（理想情况下，该常量将存储在代码库外部），并改进用户名/密码检查中的内容，TokenHandler以检查不仅仅是myusername/ mypassword组合。</p>
<p>下面的代码是gin框架对jwt的封装</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一个字符串</span></span><br><span class="line"><span class="keyword">var</span> jwtkey = []<span class="keyword">byte</span>(<span class="string">&quot;www.topgoer.com&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Claims <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserId <span class="keyword">uint</span></span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/set&quot;</span>, setting)</span><br><span class="line">    r.GET(<span class="string">&quot;/get&quot;</span>, getting)</span><br><span class="line">    <span class="comment">//监听端口默认为8080</span></span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//颁发token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setting</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">    expireTime := time.Now().Add(<span class="number">7</span> * <span class="number">24</span> * time.Hour)</span><br><span class="line">    claims := &amp;Claims&#123;</span><br><span class="line">        UserId: <span class="number">2</span>,</span><br><span class="line">        StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">            ExpiresAt: expireTime.Unix(), <span class="comment">//过期时间</span></span><br><span class="line">            IssuedAt:  time.Now().Unix(),</span><br><span class="line">            Issuer:    <span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment">// 签名颁发者</span></span><br><span class="line">            Subject:   <span class="string">&quot;user token&quot;</span>, <span class="comment">//签名主题</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">    <span class="comment">// fmt.Println(token)</span></span><br><span class="line">    tokenString, err := token.SignedString(jwtkey)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    str = tokenString</span><br><span class="line">    ctx.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;token&quot;</span>: tokenString&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getting</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">    tokenString := ctx.GetHeader(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">    <span class="comment">//vcalidate token formate</span></span><br><span class="line">    <span class="keyword">if</span> tokenString == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token, claims, err := ParseToken(tokenString)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> || !token.Valid &#123;</span><br><span class="line">        ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="number">111</span>)</span><br><span class="line">    fmt.Println(claims.UserId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="keyword">string</span>)</span> <span class="params">(*jwt.Token, *Claims, error)</span></span> &#123;</span><br><span class="line">    Claims := &amp;Claims&#123;&#125;</span><br><span class="line">    token, err := jwt.ParseWithClaims(tokenString, Claims, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(i <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtkey, <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> token, Claims, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>go</category>
        <category>方法</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>token</tag>
        <tag>JWT</tag>
        <tag>gin</tag>
      </tags>
  </entry>
  <entry>
    <title>viper</title>
    <url>/2022/01/18/viper/</url>
    <content><![CDATA[<h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>Viper需要最少知道在哪里查找配置文件的配置。Viper支持<code>JSON</code>、<code>TOML</code>、<code>YAML</code>、<code>HCL</code>、<code>envfile</code>和<code>Java properties</code>格式的配置文件。Viper可以搜索多个路径，但目前单个Viper实例只支持单个配置文件。Viper不默认任何配置搜索路径，将默认决策留给应用程序。</p>
<p>下面是一个如何使用Viper搜索和读取配置文件的示例。不需要任何特定的路径，但是至少应该提供一个配置文件预期出现的路径。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">viper.SetConfigFile(<span class="string">&quot;./config.yaml&quot;</span>) <span class="comment">// 指定配置文件路径</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>) <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>) <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;/etc/appname/&quot;</span>)   <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;$HOME/.appname&quot;</span>)  <span class="comment">// 多次调用以添加多个搜索路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)               <span class="comment">// 还可以在工作目录中查找配置</span></span><br><span class="line">err := viper.ReadInConfig() <span class="comment">// 查找并读取配置文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 处理读取配置文件的错误</span></span><br><span class="line">	<span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Fatal error config file: %s \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在加载配置文件出错时，你可以像下面这样处理找不到配置文件的特定情况：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line">        <span class="comment">// 配置文件未找到错误；如果需要可以忽略</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 配置文件被找到，但产生了另外的错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件找到并成功解析</span></span><br></pre></td></tr></table></figure>

<h3 id="不想太复杂，简单点的用法，就直接参考以下"><a href="#不想太复杂，简单点的用法，就直接参考以下" class="headerlink" title="不想太复杂，简单点的用法，就直接参考以下"></a>不想太复杂，简单点的用法，就直接参考以下</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConfigInit</span><span class="params">()</span></span> &#123;</span><br><span class="line">	viper.SetConfigFile(<span class="string">&quot;./conf/config.yaml&quot;</span>)<span class="comment">//配置文件的路径</span></span><br><span class="line">	viper.SetConfigName(<span class="string">&quot;config&quot;</span>)<span class="comment">//配置文件的名称</span></span><br><span class="line">	viper.AddConfigPath(<span class="string">&quot;./conf&quot;</span>)<span class="comment">//添加viper的配置文件搜索路径</span></span><br><span class="line">	err := viper.ReadInConfig()<span class="comment">//viper完成配置文件的读取</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatal(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="在main-go主函数中运行ConfigInit-后"><a href="#在main-go主函数中运行ConfigInit-后" class="headerlink" title="在main.go主函数中运行ConfigInit()后"></a>在main.go主函数中运行ConfigInit()后</h4><h5 id="即可以在后面随时调用viper-Get-“mysql-host”-这样的形式去调取config-yaml里的配置文件信息"><a href="#即可以在后面随时调用viper-Get-“mysql-host”-这样的形式去调取config-yaml里的配置文件信息" class="headerlink" title="即可以在后面随时调用viper.Get(“mysql.host”)这样的形式去调取config.yaml里的配置文件信息"></a>即可以在后面随时调用viper.Get(“mysql.host”)这样的形式去调取config.yaml里的配置文件信息</h5><h4 id="还有一些如viper-GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。"><a href="#还有一些如viper-GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。" class="headerlink" title="还有一些如viper.GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。"></a>还有一些如viper.GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。</h4>]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>viper</tag>
      </tags>
  </entry>
</search>
