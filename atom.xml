<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神奈かなんのBlog</title>
  
  <subtitle>rosy</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-20T14:11:31.506Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>rosy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gorm中的注意点</title>
    <link href="http://example.com/2022/01/20/order/"/>
    <id>http://example.com/2022/01/20/order/</id>
    <published>2022-01-20T14:07:59.000Z</published>
    <updated>2022-01-20T14:11:31.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-gorm中的排序踩坑"><a href="#1-gorm中的排序踩坑" class="headerlink" title="1.gorm中的排序踩坑"></a>1.gorm中的排序踩坑</h1><h3 id="如查询”按照created-at升序第一个创建的User“"><a href="#如查询”按照created-at升序第一个创建的User“" class="headerlink" title="如查询”按照created_at升序第一个创建的User“"></a>如查询”按照<code>created_at</code>升序第一个创建的User“</h3><h3 id="正确的写法："><a href="#正确的写法：" class="headerlink" title="正确的写法："></a>正确的写法：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;models.User&#123;&#125;).Order(<span class="string">&quot;created_at ASC&quot;</span>).Limit(<span class="number">1</span>).Find(&amp;s)</span><br></pre></td></tr></table></figure><p>sql:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;users&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">ASC</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="错误写法："><a href="#错误写法：" class="headerlink" title="错误写法："></a>错误写法：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;models.User&#123;&#125;).Order(<span class="string">&quot;created_at ASC&quot;</span>).First(&amp;s)</span><br></pre></td></tr></table></figure><p>这样写会自动加上主键的排序，生成的sql，虽然说结果应该都没什么差别，但是和预期的sql并不一样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;users&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">ASC</span>, &quot;users&quot;.&quot;id&quot; <span class="keyword">ASC</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="错误写法：-1"><a href="#错误写法：-1" class="headerlink" title="错误写法："></a>错误写法：</h3><p>这样写，直接和想要的sql意图相反，变成”最后一个创建的User“，且自动加上了主键的排序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;models.User&#123;&#125;).Order(<span class="string">&quot;created_at DESC&quot;</span>).Last(&amp;s)</span><br></pre></td></tr></table></figure><p>sql:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> &quot;users&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> created_at <span class="keyword">DESC</span>, &quot;users&quot;.&quot;id&quot; <span class="keyword">DESC</span> LIMIT <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-gorm中的排序踩坑&quot;&gt;&lt;a href=&quot;#1-gorm中的排序踩坑&quot; class=&quot;headerlink&quot; title=&quot;1.gorm中的排序踩坑&quot;&gt;&lt;/a&gt;1.gorm中的排序踩坑&lt;/h1&gt;&lt;h3 id=&quot;如查询”按照created-at升序第一个创建的U</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    <category term="gorm" scheme="http://example.com/categories/go/gorm/"/>
    
    
    <category term="gorm" scheme="http://example.com/tags/gorm/"/>
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>PhotoEncoding</title>
    <link href="http://example.com/2022/01/19/PhotoEncoding/"/>
    <id>http://example.com/2022/01/19/PhotoEncoding/</id>
    <published>2022-01-19T12:46:29.000Z</published>
    <updated>2022-01-19T12:52:11.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><p>可见以上分别是为文本类型与二进制类型的对应</p><h5 id="而对于图片的编码保存，有用的即是blob类型和text类型的对应"><a href="#而对于图片的编码保存，有用的即是blob类型和text类型的对应" class="headerlink" title="而对于图片的编码保存，有用的即是blob类型和text类型的对应"></a>而对于图片的编码保存，有用的即是blob类型和text类型的对应</h5><h4 id="blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码"><a href="#blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码" class="headerlink" title="blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码"></a>blob可以直接储存图片的二进制编码，而text可以用来储存图片的base64编码</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串类型&quot;&gt;&lt;a href=&quot;#字符串类型&quot; class=&quot;headerlink&quot; title=&quot;字符串类型&quot;&gt;&lt;/a&gt;字符串类型&lt;/h2&gt;&lt;p&gt;字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    <category term="encoding" scheme="http://example.com/categories/go/encoding/"/>
    
    
    <category term="encoding" scheme="http://example.com/tags/encoding/"/>
    
    <category term="base64" scheme="http://example.com/tags/base64/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
    <category term="database" scheme="http://example.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>viper</title>
    <link href="http://example.com/2022/01/18/viper/"/>
    <id>http://example.com/2022/01/18/viper/</id>
    <published>2022-01-18T07:26:22.000Z</published>
    <updated>2022-01-20T02:09:22.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>Viper需要最少知道在哪里查找配置文件的配置。Viper支持<code>JSON</code>、<code>TOML</code>、<code>YAML</code>、<code>HCL</code>、<code>envfile</code>和<code>Java properties</code>格式的配置文件。Viper可以搜索多个路径，但目前单个Viper实例只支持单个配置文件。Viper不默认任何配置搜索路径，将默认决策留给应用程序。</p><p>下面是一个如何使用Viper搜索和读取配置文件的示例。不需要任何特定的路径，但是至少应该提供一个配置文件预期出现的路径。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">viper.SetConfigFile(<span class="string">&quot;./config.yaml&quot;</span>) <span class="comment">// 指定配置文件路径</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>) <span class="comment">// 配置文件名称(无扩展名)</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>) <span class="comment">// 如果配置文件的名称中没有扩展名，则需要配置此项</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;/etc/appname/&quot;</span>)   <span class="comment">// 查找配置文件所在的路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;$HOME/.appname&quot;</span>)  <span class="comment">// 多次调用以添加多个搜索路径</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)               <span class="comment">// 还可以在工作目录中查找配置</span></span><br><span class="line">err := viper.ReadInConfig() <span class="comment">// 查找并读取配置文件</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">// 处理读取配置文件的错误</span></span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;Fatal error config file: %s \n&quot;</span>, err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在加载配置文件出错时，你可以像下面这样处理找不到配置文件的特定情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> _, ok := err.(viper.ConfigFileNotFoundError); ok &#123;</span><br><span class="line">        <span class="comment">// 配置文件未找到错误；如果需要可以忽略</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 配置文件被找到，但产生了另外的错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件找到并成功解析</span></span><br></pre></td></tr></table></figure><h3 id="不想太复杂，简单点的用法，就直接参考以下"><a href="#不想太复杂，简单点的用法，就直接参考以下" class="headerlink" title="不想太复杂，简单点的用法，就直接参考以下"></a>不想太复杂，简单点的用法，就直接参考以下</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConfigInit</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetConfigFile(<span class="string">&quot;./conf/config.yaml&quot;</span>)<span class="comment">//配置文件的路径</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)<span class="comment">//配置文件的名称</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;./conf&quot;</span>)<span class="comment">//添加viper的配置文件搜索路径</span></span><br><span class="line">err := viper.ReadInConfig()<span class="comment">//viper完成配置文件的读取</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在main-go主函数中运行ConfigInit-后"><a href="#在main-go主函数中运行ConfigInit-后" class="headerlink" title="在main.go主函数中运行ConfigInit()后"></a>在main.go主函数中运行ConfigInit()后</h4><h5 id="即可以在后面随时调用viper-Get-“mysql-host”-这样的形式去调取config-yaml里的配置文件信息"><a href="#即可以在后面随时调用viper-Get-“mysql-host”-这样的形式去调取config-yaml里的配置文件信息" class="headerlink" title="即可以在后面随时调用viper.Get(“mysql.host”)这样的形式去调取config.yaml里的配置文件信息"></a>即可以在后面随时调用viper.Get(“mysql.host”)这样的形式去调取config.yaml里的配置文件信息</h5><h4 id="还有一些如viper-GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。"><a href="#还有一些如viper-GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。" class="headerlink" title="还有一些如viper.GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。"></a>还有一些如viper.GetString等等其他函数以及对配置文件的增删查改操作，可以自行去google，在此不做展开。</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;读取配置文件&quot;&gt;&lt;a href=&quot;#读取配置文件&quot; class=&quot;headerlink&quot; title=&quot;读取配置文件&quot;&gt;&lt;/a&gt;读取配置文件&lt;/h3&gt;&lt;p&gt;Viper需要最少知道在哪里查找配置文件的配置。Viper支持&lt;code&gt;JSON&lt;/code&gt;、&lt;code</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
    <category term="viper" scheme="http://example.com/tags/viper/"/>
    
  </entry>
  
  <entry>
    <title>GoWeb开发中token及其使用解析</title>
    <link href="http://example.com/2022/01/18/token/"/>
    <id>http://example.com/2022/01/18/token/</id>
    <published>2022-01-18T04:53:00.000Z</published>
    <updated>2022-01-18T05:45:58.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生成解析token"><a href="#生成解析token" class="headerlink" title="生成解析token"></a>生成解析token</h1><p>如今有很多将身份验证内置到API中的方法 -JSON Web令牌只是其中之一。JSON Web令牌（JWT）作为令牌系统而不是在每次请求时都发送用户名和密码，因此比其他方法（如基本身份验证）具有固有的优势。要了解更多信息，请直接进入jwt.io上的介绍，然后再直接学习。</p><p>以下是JWT的实际应用示例。主要有两个部分：提供用户名和密码以获取令牌；并根据请求检查该令牌。</p><p>在此示例中，我们使用了两个库，即Go中的JWT实现以及将其用作中间件的方式。</p><p>最后，在使用此代码之前，您需要将APP_KEY常量更改为机密（理想情况下，该常量将存储在代码库外部），并改进用户名/密码检查中的内容，TokenHandler以检查不仅仅是myusername/ mypassword组合。</p><p>下面的代码是gin框架对jwt的封装</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义一个字符串</span></span><br><span class="line"><span class="keyword">var</span> jwtkey = []<span class="keyword">byte</span>(<span class="string">&quot;www.topgoer.com&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Claims <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserId <span class="keyword">uint</span></span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/set&quot;</span>, setting)</span><br><span class="line">    r.GET(<span class="string">&quot;/get&quot;</span>, getting)</span><br><span class="line">    <span class="comment">//监听端口默认为8080</span></span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//颁发token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setting</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">    expireTime := time.Now().Add(<span class="number">7</span> * <span class="number">24</span> * time.Hour)</span><br><span class="line">    claims := &amp;Claims&#123;</span><br><span class="line">        UserId: <span class="number">2</span>,</span><br><span class="line">        StandardClaims: jwt.StandardClaims&#123;</span><br><span class="line">            ExpiresAt: expireTime.Unix(), <span class="comment">//过期时间</span></span><br><span class="line">            IssuedAt:  time.Now().Unix(),</span><br><span class="line">            Issuer:    <span class="string">&quot;127.0.0.1&quot;</span>,  <span class="comment">// 签名颁发者</span></span><br><span class="line">            Subject:   <span class="string">&quot;user token&quot;</span>, <span class="comment">//签名主题</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">    <span class="comment">// fmt.Println(token)</span></span><br><span class="line">    tokenString, err := token.SignedString(jwtkey)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    str = tokenString</span><br><span class="line">    ctx.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">&quot;token&quot;</span>: tokenString&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getting</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">    tokenString := ctx.GetHeader(<span class="string">&quot;Authorization&quot;</span>)</span><br><span class="line">    <span class="comment">//vcalidate token formate</span></span><br><span class="line">    <span class="keyword">if</span> tokenString == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    token, claims, err := ParseToken(tokenString)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> || !token.Valid &#123;</span><br><span class="line">        ctx.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">401</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;权限不足&quot;</span>&#125;)</span><br><span class="line">        ctx.Abort()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="number">111</span>)</span><br><span class="line">    fmt.Println(claims.UserId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="keyword">string</span>)</span> <span class="params">(*jwt.Token, *Claims, error)</span></span> &#123;</span><br><span class="line">    Claims := &amp;Claims&#123;&#125;</span><br><span class="line">    token, err := jwt.ParseWithClaims(tokenString, Claims, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(i <span class="keyword">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtkey, <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> token, Claims, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;生成解析token&quot;&gt;&lt;a href=&quot;#生成解析token&quot; class=&quot;headerlink&quot; title=&quot;生成解析token&quot;&gt;&lt;/a&gt;生成解析token&lt;/h1&gt;&lt;p&gt;如今有很多将身份验证内置到API中的方法 -JSON Web令牌只是其中之一。JSO</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    <category term="方法" scheme="http://example.com/categories/go/%E6%96%B9%E6%B3%95/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
    <category term="token" scheme="http://example.com/tags/token/"/>
    
    <category term="JWT" scheme="http://example.com/tags/JWT/"/>
    
    <category term="gin" scheme="http://example.com/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>Swag及其使用</title>
    <link href="http://example.com/2022/01/18/swag/"/>
    <id>http://example.com/2022/01/18/swag/</id>
    <published>2022-01-18T03:17:37.000Z</published>
    <updated>2022-01-20T01:40:02.836Z</updated>
    
    <content type="html"><![CDATA[<p>下面以gin-swagger为例，说明swaggo的用法。</p><p>安装swag命令行<br>要使用swaggo，首先要下载一个swag命令行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/swaggo/swag/cmd/swag</span><br></pre></td></tr></table></figure><h4 id="下面是设置环境变量"><a href="#下面是设置环境变量" class="headerlink" title="下面是设置环境变量"></a>下面是设置环境变量</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开系统的环境变量设置找到系统变量</span><br><span class="line">发现在$ GOPATH / bin /下会看到多了一个swag。把$ GOPATH / bin /加到PATH后，就可以在任意目录下直接用swag命令行了。否则仅能在swag.exe所在目录下才能使用swag命令。环境变量的作用相当于一个导向作用。</span><br></pre></td></tr></table></figure><p>在包含main.go的Go工程的根目录下执行swag init，swag会检索当前工程里的swag注解（类似上述Java中的注解），生成docs.go以及swagger.json/yaml。</p><p>获取gin专用的gin-swagger<br>里面包含了一个示例代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -u github.com/swaggo/gin-swagger</span><br><span class="line">$ <span class="keyword">go</span> get -u github.com/swaggo/gin-swagger/swaggerFiles</span><br></pre></td></tr></table></figure><p>编写gin-swagger需要的注释<br>接下来就是编写注释了。注释分为两部分，一是整体应用的说明，二是具体api的说明。</p><p>整体应用的说明<br>在主入口main.go中增加：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span> <span class="comment">// gin-swagger middleware</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/swaggo/gin-swagger/swaggerFiles&quot;</span> <span class="comment">// swagger embed files</span></span><br></pre></td></tr></table></figure><p>以及针对该应用程序的api说明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/swaggo/gin-swagger/swaggerFiles&quot;</span><span class="string">`)</span></span><br></pre></td></tr></table></figure><pre><code>_ &quot;github.com/swaggo/gin-swagger/example/docs&quot;</code></pre><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @title Swagger Example API</span></span><br><span class="line"><span class="comment">// @version 0.0.1</span></span><br><span class="line"><span class="comment">// @description  This is a sample server Petstore server.</span></span><br><span class="line"><span class="comment">// @BasePath /api/v1/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.New()</span><br><span class="line">r.GET(<span class="string">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意@Router的路径。swagger注释中说明的@Router是在@BasePath下的相对路径，并不为绝对路径。</p><p>具体api的说明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @Summary Add a new pet to the store</span></span><br><span class="line"><span class="comment">// @Description get string by ID</span></span><br><span class="line"><span class="comment">// @Accept  json</span></span><br><span class="line"><span class="comment">// @Produce  json</span></span><br><span class="line"><span class="comment">// @Param   some_id     path    int     true        &quot;Some ID&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; string&quot;ok&quot;</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; web.APIError &quot;We need ID!!&quot;</span></span><br><span class="line"><span class="comment">// @Failure 404 &#123;object&#125; web.APIError &quot;Can not find ID&quot;</span></span><br><span class="line"><span class="comment">// @Router /testapi/get-string-by-int/&#123;some_id&#125; [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStringByInt</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">err := web.APIError&#123;&#125;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明下几个参数。</p><p>如果不需要参数（例如，获取所有类型的，由url就齐活了），则不需要加@Param。参数可以是int或字符串类型。这里的定义会影响swagger ui发送的请求，如果定义错了会导致发送请求的数据不对，例如对数字进行了转义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Param group body model.SwagGroupAdd true &quot;Add group&quot;</span></span><br><span class="line"><span class="comment">// @Param name path string true &quot;Group Name&quot;</span></span><br><span class="line"><span class="comment">// @Param role query int true &quot;Role ID&quot;</span></span><br></pre></td></tr></table></figure><p>@Success和@Failure定义了返回值，类型可以是字符串，对象，数组。按照一般的restful定义，这三个类型足够表达返回值了。</p><p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档<br>不过有些不太标准的restful实践会在上述返回之上再包装一个代码/消息/正文，所以对swaggo来说会造成一些新的负担，因为必须为这些返回类型单独加对应的类型。这项。</p><p>swag初始化<br>在项目根目录里执行swag init，生成docs/docs.go；再执行go run main.go，访问<a href="http://localhost:8080/swagger/index.html%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%84%89%E5%BF%AB%E7%9A%84%E4%BD%BF%E7%94%A8swagger">http://localhost:8080/swagger/index.html，就可以愉快的使用swagger</a> ui了。</p><h4 id="以下是可能出现的问题"><a href="#以下是可能出现的问题" class="headerlink" title="以下是可能出现的问题"></a>以下是可能出现的问题</h4><ul><li><p><strong>swagger页面出现加载错误</strong></p><h1 id="mitting-host-returns-Internal-Server-Error-500-1019"><a href="#mitting-host-returns-Internal-Server-Error-500-1019" class="headerlink" title="mitting host returns Internal Server Error (500) #1019"></a>mitting host returns Internal Server Error (500) #1019</h1><h4 id="akshay196-opened-this-issue-on-7-Oct-2021-·-1-comment"><a href="#akshay196-opened-this-issue-on-7-Oct-2021-·-1-comment" class="headerlink" title="akshay196 opened this issue on 7 Oct 2021 · 1 comment"></a><strong><a href="https://github.com/akshay196">akshay196</a> opened this issue on 7 Oct 2021 · 1 comment</strong></h4><p><strong>Describe the bug</strong> </p><p>[<img src="https://user-images.githubusercontent.com/16691314/136343497-6db89882-72cb-4434-bef2-609954622492.png" alt="Screenshot from 2021-10-07 13-26-58"></p></li></ul><h3 id="问题原因以及解决方案"><a href="#问题原因以及解决方案" class="headerlink" title="问题原因以及解决方案"></a>问题原因以及解决方案</h3><h5 id="没有import-之前swag-init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”-”"><a href="#没有import-之前swag-init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”-”" class="headerlink" title="没有import 之前swag init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”_”"></a>没有import 之前swag init自动生成的”docs“包，请自行import。若因为docs包导入却未使用的原因致使go编译器报错，自行在包前加上匿名字段”_”</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面以gin-swagger为例，说明swaggo的用法。&lt;/p&gt;
&lt;p&gt;安装swag命令行&lt;br&gt;要使用swaggo，首先要下载一个swag命令行。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    <category term="框架工具" scheme="http://example.com/categories/go/%E6%A1%86%E6%9E%B6%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Swaggo" scheme="http://example.com/tags/Swaggo/"/>
    
    <category term="Swag" scheme="http://example.com/tags/Swag/"/>
    
  </entry>
  
</feed>
